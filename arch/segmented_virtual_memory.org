#+TITLE: 分段虚拟内存
#+AUTHOR: Cauchy(pqy7172@gmail.com)
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../org-manual.css" type="text/css">

传统的x86模式支持分段翻译机制，这种机制允许重定位或隔离虚拟内存中的指令和数据。一个段就是虚拟内存中的一片连续内存，其大小或位置可以是任意的。指令或数据可以分配到一个或多个内存段，每个段都有它自己的保护权限。处理器保证段之间的访问满足相应的权限关系。

分段机制提供十个分段寄存器，每个都定义了一个段。其中六个定义了用户段（CS，DS，ES，FS，GS以及SS）。用户段保存了软件、数据以及栈，可以被应用软件或系统软件使用。剩下的四个段寄存器（GDT，LDT，IDT以及TR）定义了系统段。系统段包含一些初始化了的数据结构并且仅由系统软件使用。段寄存器包含一个段的起始基址，limit则指明了段的大小，以及一些指明段保护特性的属性。

尽管分段在重定位以及数据保护方面具有很大的灵活性，但是使用软件与硬件分页结合的机制去处理内存隔离和重定位往往效率更高。由于这个原因，许多现代的操作系统常常绕过分段的特点。然而，分段是不可能完全禁用的，并且对于分段机制的理解对于实现long-moded的系统软件是至关重要的。

在long mode下，分段的作用取决于处理器是否是在兼容或64-bit模式：
- 在兼容模式下，分段的功能和legacy mode下一样。
- 64-bit模式下，分段是禁用了的，64-bit的虚拟地址是平坦寻址的。然而某些段寄存器仍旧保留了它的功能，尤其是系统段寄存器。
* 实模式分段
在重启或加电后，处理器一开始总是会进入实模式，保护模式从实模式进入。

实模式提供1MB的物理地址寻址空间。

每个64K段（CS，DS，ES，FS，GS，SS）都是对齐在16-byte的边界。段基址是给定段的最低地址，并且等于段选择子乘以16，POP和MOV指令可以用于将一个新的段描述符加载到段寄存器，当加载完成后，段选择子会被更新，段基址会被设为选择子×16。段长和段属性不会改变，通常是64K，可读写。

在FAR长转移时，CS段寄存器会被更新成新的值。并且CS的段基址会被设为选择子×16。段长和段属性不会改变，通常是64K，可读写。

GDT，LDT以及TSS在实模式下不被使用。
* 虚拟8086模式分段
* 保护模式分段内存模型
* 分段数据结构与寄存器
* 段选择子与寄存器
* 描述符表
* Legacy分段描述符
* Long-mode分段描述符
* 分段保护概要
* 数据访问权限检查
* 控制转换权限检查
* 限长检查
* 类型检查
