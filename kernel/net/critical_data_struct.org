#+TITLE: 关键数据结构
#+AUTHOR: Cauchy(pqy7172@gmail.com)
#+OPTIONS: ^:nil
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../../org-manual.css" type="text/css">
在阅读本系列的后续文章和研究内核网络代码时，会不时参考几个关键结构，自然对其中的各个域也要有一定的理解。

本文会介绍下面这些数据结构，并且会提及某些操作这些数据结构的函数和宏：
+ struct sk_buff
  
  用于存放一个packet。该结构体会被所有网络层用到，存放头部信息，用户数据（负载payload）信息，以及其它需要协调工作的信息。

+ struct net_device

  在内核中的网络设备都由这个结构体表示，它包含有硬件以及软件配置信息。后面的系列文章会介绍它的分配。

另外还有一个关键数据结构是struct sock，它用来存储套接字的网络信息，不过这不是本系列文章的重点。
* 套接字缓存：sk_buff结构体
这个结构体或许是Linux内核网络里最重要的数据结构了，表示了到达或要传输数据的的头部信息，定义在include/linux/skbuff.h文件里，这个结构体包含了大量的成员。

在内核开发的历史上，这个结构体改变了许多次，包括添加新的选项，重排已经存在的成员，这些域大致可以分为以下四类：
+ 布局
+ 通用
+ 特定功能相关的
+ 管理函数

这个结构体会被几个不同的网络层（包括MAC或者其它在第二层的链路层协议，L3层上的IP，L4层上的TCP或UDP）使用到，并且随着包从一层传到另一层，结构体中的各个域也会改变。在L4层把包传给L3层
之前, 会附加一个头部信息, 而L3层在传到L2层时, 也会附加它的头. 比起将数据从一层拷贝到另一层,
只附加头部信息, 效率就很高. 因为向一个buffer的头部处添加空间(通过操作指向这个buffer的变量)是一个比较复杂的操作, 内核提供skb_reserve函数来完成这个功能. 因此到每个协议层时, 要做的第一件事就是调用skb_reserve函数来为协议预留头部信息. 在后面的小节里我们会看到一个例子, 当缓存在层之间传递时, 内核是如何确保在缓存的头部预留足够多的空间.

当缓存(数据)在协议栈由底向上传递时, 底层(旧)的头部信息就不再需要了. 举例来说, L2层的头部信息, 仅由设备驱动层使用, L3层并不关心. 不过内核代码并不是直接从缓存(数据)中直接删除L2层的头部信息, 只是将指向payload的指针向前移动到L3的头部信息处, 这样消耗的CPU周期就比较少.

** 网络选项与内核结构体
配置内核或查看TCP/IP的spec时, 网络代码都会提供许多有用的选项但并不是必须的, 比如防火墙, 多
播以及其它的功能. 这些选项大多数都要求在内核的数据结构里增加更多的域. 因此在sk_buff里随处
可见C的预处理宏#ifdef. 比如在sk_buff结构体的底部, 可以看到这样的代码部分:

#+begin_src C++ :includes <stdio.h>
...
#ifdef CONFIG_NET_SCHED
  __u32 tc_index;
#ifdef CONFIG_NET_CLS_ACT
  __32 tc_verd;
  __u32 tc_classid;
#endif
#endif
#+end_src

这个例子就展示了只有在编译时定义了CONFIG_NET_SCHED符号时tc_index域才是sk_buff结构体的一部分. 这就是说, 系统管理员使用make config或者使用自动安装工具, 将Device Drivres->Networking support->Networking options->Qos and/or fair queueing选项打开了.

这个例子实际上展示了两个嵌套的选项, CONFIG_NET_CLS_ACT下的成员只有在QoS and/or fair
queueing选项得到支持时才考虑加入到sk_buff结构体里来.

需要注意的是, QoS选项不能被编译成模块的形式. 因为使能这个选项后, 对于内核数据结构的影响通
常是不可逆的. 一般来说, 那些会造成内核数据结构有改变的选项都不适合编译成模块.

** 字段布局
sk_buff里有几个成员, 只是为了帮助搜索和组织数据结构本身, 内核在双向链表里维护sk_buff结构体.
但是这个链表的组织比传统的要复杂些.

像其它双链表一样, 通过next和prev域来连接这些sk_buff结构体. 而sb_buff有一个特殊的要求就是要能快速的找到整个链表的头. 为了达到这个目的, 一个sk_buff_head类型的成员放在了链表的开头. 其定义如下:
#+begin_src C++ :includes <stdio.h>
struct sk_buff_head {
struct sk_buff *next;
struct sk_buff *prev;
__u32 qlen;
spinlock_t lock;
}
#+end_src

qlen代表列表中有多少个元素. lock用来防止同时访问列表, 后面还会介绍.

sk_buff和sk_buff_head的前两个元素是一样的: next和prev指针. 另外sk_buff还包括一个list域用来指向sk_buff_head. 如下的图:

#+CAPTION: sk_buff和sk_buff_head之间的关系
#+ATTR_HTML: :align centering
#+ATTR_HTML: :width 30% :height 30%
[[./img/sk_buff_head_rel.png]]

其它的一些域:

- struct sock *sk

  指向拥有这个sk_buff的套接字. 当数据在本地生成或被本地进程接收时, 就需要这个域. 因为数据本身和套接字相关的信息被L4层(TCP或UDP)以及用户程序所使用. 当这个buffer仅仅是转发(forward)时, 也就是源和目的地都不在本机, 这个指针就是NULL.

- unsigned int len

  在buffer中数据的大小. 这个长度包括被head所指的主buffer里的数据, 以及分段(fragments)中的数据. 它的值会随着buffer在网络协议栈上移动而变化, 比如沿协议栈向上时, 头部就会被丢弃, 而沿协议栈向下时, 头部就会被添加上. 当然, len是算上了协议头部的. 关于这一点后面还会介绍.

- unsigned int data_len

  与len不同的是, data_len仅仅计算在分段中的数据长度.

- unsigned int mac_len

  链路层(MAC)的头部长度.

- refcount_t users

  记录了有多少个实体正在使用sk_buff结构体. 使用这个成员主要是为了防止还在使用sk_buff时而被释放了. 每个使用这个结构体的用户都应该增加这个域, 并且在必要的时候递减这个域. 需要注意的是, 这个域仅是包含对sk_buff本身引用的计数, 而对于由sk_buff包含数据的计数在skb_shared_info或skb_shinfo中一个相似的域: dataref来计数, 后面会介绍这点.

  user有时直接使用atomic_inc或atomic_dec来直接加减, 但是大多数时候是通过skb_get或kfree_skb来操作.

- unsigned int truesize

  表示了buffer的总大小, 要算上sk_buff结构体自身的大小. 当buffer在alloc_skb函数里请求分配len字节大小的时候, 这个域就会被初始化成len+sizeof(sk_buff):

  #+begin_src C++ :includes <stdio.h>
  struct sk_buff *alloc_skb(unsigned int size, int gfp_mask)
  {
    ...
    skb->truesize = size + sizeof(struct sk_buff);
    ...
  }
  #+end_src

  当skb->len更新时, 这个域也要更新.

- unsigned char *head
- unsigned char *end
- unsigned char *data
- unsigned char *tail
  
  这些域划分了buffer以及在其中的数据的边界. 当各层操作它们自己的数据时, 可能会给header或数据本身分配更多空间. head和end指向分配buffer的开始以及结尾处, 而data和tail指向实际数据的开始与结束处. 如下图所示:

#+CAPTION: head/end和data/tail之间的对比
#+ATTR_HTML: :align centering
#+ATTR_HTML: :width 50% :height 50%
[[./img/head-end-data-tail.png]]

  网络协议栈上的某层可以将它自己的协议header填到head与data之间. 而在tail和end之间还可以填充尾部信息. 

- void (*destructor)(...)
  
  当一个buffer被移除时, 这个成员所指的函数会执行某些动作. 当buffer不属于一个套节字时,
  destructor通常不会被初始化. 当buffer属于某个套接字时, 这个成员通常会被初始化为sock_rfree
  或sock_wfree(分别由skb_set_owner_r或skb_set_owner_w初始化).

** 通用字段
下面介绍一些sk_buff主要的域，这些域不和内核特定的feature关联。
- tsamp

  包到达或离开的时间。

- struct net_device	*dev

  表示一个网络设备，后面还会详细介绍。dev结构体充当的角色作用，依赖于存在buffer里的数据是要被传送的还是刚到达的。

  当包是到达的时候，设备驱动会更新这个域，以一个指向代表接受包的网卡设备。

  当包准备被发送出去时，dev就表示发送包的设备。

  某些网络功能，允许多个设备聚合在一起成为一个虚拟的设备，这个虚拟的设备不直接和具体的硬件关联起来。当设备驱动被调用时，dev成员指向虚拟设备的net_device结构体。驱动程序会从这组硬件设备相关的dev结构体中选择一个dev。换言之，指向传输设备的指针在包处理的过程中可能会改变。

- char cb[40]

  控制buffer，或者用来存储私有信息，由每一层维护，自己内部使用。在sk_buff里静态分配。在各层的代码里，访问这个成员通过宏来做，这使得代码可读性更好。比如对TCP来说，就用来存储tcp_skb_cb结构体。

  #+begin_src C++ :includes <stdio.h>
  struct tcp_skb_cb {
    ...
	__u32		seq;		/* Starting sequence number	*/
	__u32		end_seq;	/* SEQ + FIN + SYN + datalen	*/
	union {
		/* Note : tcp_tw_isn is used in input path only
		 *	  (isn chosen by tcp_timewait_state_process())
		 *
		 * 	  tcp_gso_segs/size are used in write queue only,
		 *	  cf tcp_skb_pcount()/tcp_skb_mss()
		 */
		__u32		tcp_tw_isn;
		struct {
			u16	tcp_gso_segs;
			u16	tcp_gso_size;
		};
	};
  }
  ...
  #+end_src

  下面这个宏被用来访问这个结构体，这个宏其实就是简单的指针转换：
  #+begin_src C++ :includes <stdio.h>
  #define TCP_SKB_CB(__skb)	((struct tcp_skb_cb *)&((__skb)->cb[0]))
  #+end_src

- unsigned int csum
- unsigned char ip_summed

  校验和以及关联的状态标志。

- unsigned char cloned

  一个boolean标志，当设置时，表示这个结构体是另一个结构体的拷贝。

- unsigned char pkt_type

  基于L2层的目的地址而划分帧的类型。对于以太网设备来说，这个参数由函数eth_type_trans设置，后面还会介绍。

  主要可能的值包括：

  - PACKET_HOST

    收到的帧的目的地址就是接收接口，换句话说，包已经到达了目的地址。

  - PACKET_MULTICAST

    收到的帧的目的地址是一个注册的多播地址。
    
  - PACKET_BROADCAST

    收到帧的目的地址是一个广播地址。
      
  - PACKET_OTHERHOST

    收到帧的目的地址不属于接收的这个卡。这时，如果forward（转发）打开了的话，就转发，否则丢弃。

  - PACKET_LOOPBACK

    包是发送到回环（loopback）设备上。由于这个flag，当处理回环设备的包时，相比真实的设备内核会跳过一些操作。

  - PACKET_FASTROUTE

    包通过fastroute功能进行路由，fastroute在2.6以后内核被支持。

- __u32 priority

  这个成员表示了一个要被传送或转发包的QoS等级（Quality of Service）。如果包是在本地机器生成的，由socket层来定义priority值。而如果是转发的包，rt_tos2priority会根据IP头里的ToS（Type of Service）来填这个priority，是由ip_forward调用rt_tos2priority完成的。

- __be16 protocol;

  表示了在设备驱动层（L2）看到的上一层，典型的值有：

  #+begin_src C++ :includes <stdio.h>
  #define ETH_P_IP	0x0800		/* Internet Protocol packet	*/
  #define ETH_P_IPV6	0x86DD		/* IPv6 over bluebook		*/
  #+end_src

  每种协议都有它自己的处理接受包的函数，该字段由驱动使用用来通知上层使用哪个函数句柄。每个驱动都会调用netif_rx来调用上层的句柄。

** 功能相关的域
Linux是模块化的，可以允许什么被包括进内核，什么不被包括进内核。因此仅当内核被编译为支持某些功能的时候才会将sk_buff里某些成员包括进内核。比如对于Netfiler或QoS来说就是这样。

** 管理函数
内核提供了很多简短的函数用来操纵sk_buff里的元素或者是操作sk_buff列表。在下图的帮助下，本节会介绍几个这样的函数：

#+CAPTION: skb操纵函数操作前后，(a): skb_put，(b): skb_push，（c）：skb_pull，(d): skb_reserve
#+ATTR_HTML: :align centering
#+ATTR_HTML: :width 30% :height 30%
[[./img/skb_ops.png]]

* net_device结构体
