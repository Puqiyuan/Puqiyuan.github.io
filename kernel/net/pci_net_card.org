#+TITLE: PCI层与网卡
#+AUTHOR: Cauchy(pqy7172@gmail.com)
#+OPTIONS: ^:nil
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../../org-manual.css" type="text/css">

本文总体介绍下PCI，再结合网卡初始化的具体流程来详细理解PCI层的功能。

PCI层存在的意义是：
- 对于PCI设备提供一些通用的公共函数接口。
- 对于内核来说也更容易收集与维护PCI设备的信息，比如统计等。

下面介绍下PCI层的几个关键数据结构，后面会用网卡这个具体的例子来解释这些关键的数据结构是如何被初始化的。

* 关键数据结构
下面来看看几个在PCI层使用的关键数据结构。
- pci_device_id

  根据PCI标准定义的设备标识符。

- pci_dev

  如同网卡设备有net_device结构体，每个PCI设备也有一个pci_dev结构体实例。

- pci_driver

  pci层与设备驱动的接口，这个结构体主要是由函数指针组成，所有的PCI设备都会使用它。这些函数指针由对应的设备驱动设置将它们指向恰当的函数实现。下面简单介绍下这个结构体中的一些主要的成员：
  1) name

     驱动的名字。

  2) const struct pci_device_id *id_table

     指向一个设备ID表，这个表是这个驱动所关心的。

  3) int  (*probe)(struct pci_dev *dev, const struct pci_device_id *id)

     当设备id和id_table中的匹配并且对应的设备正在寻找驱动，就会由pci层调用。这个函数会使能硬件，分配net_device结构体（对于网络设备的初始化），并且初始化和注册新设备。在这个函数里，驱动也会分配其它的数据结构，比如ring buffer用来接收和传送数据。

  4) void (*remove)(struct pci_dev *dev)

     当驱动unregister或可插拔设备被移除时就会调用此函数，它是与probe函数相对的一个函数，会clean up任何数据结构和状态。它是在进程上下文环境调用的，因此可以睡眠。

     网络设备通常使用这个函数来释放分配的I/O端口、I/O memory，unregister一个设备，释放net_device以及其它在probe函数分配的辅助结构体。

  5) int  (*suspend)(struct pci_dev *dev, pm_message_t state)
     
     int  (*resume)(struct pci_dev *dev)

     suspend用来将设备置于低功耗状态，resume则是将设备从低功耗状态中唤醒，多用于电源管理中。

  6) struct pci_dynids	dynids

     动态ID，后文介绍。


* 注册一个PCI NIC设备驱动
PCI设备通过几个组合在一起的参数来唯一确定，包括vendor等。这些参数在内核里由pci_device_id结构体确定。它的定义如下：
#+begin_src C++ :includes <stdio.h>
struct pci_device_id {
	__u32 vendor, device;		/* Vendor and device ID or PCI_ANY_ID*/
	__u32 subvendor, subdevice;	/* Subsystem ID's or PCI_ANY_ID */
	__u32 class, class_mask;	/* (class,subclass,prog-if) triplet */
	kernel_ulong_t driver_data;	/* Data private to the driver */
}；
#+end_src

通常vendor和device用来标识设备已经足够了. subvendor和subdevice很少使用, 一般被设置成
PCI_ANY_ID. class和class_mask指明了设备所属的类别, 网卡设备一般是NETWORK类. driver_data是由驱动程序使用的私有数据. 

一般来说, 设备驱动程序都会向内核注册一个pci_device_id向量表, 里面存放都是这个设备所能处理的pci id.

pci设备驱动的注册和取消注册通过函数pci_register_driver和pci_unregister_driver. 通过pci_driver中的id_table, 内核就知道驱动能够管理哪些设备. 并且由于pci_driver中的函数指针, 内核就可以和设备进行交互, 给内核提供了一层统一的接口.

/sys文件系统会导出系统总线的信息, 这些信息包括各种各样的设备以及它们之间的关系. 除了使用pci_driver中由驱动注册的ID(id_table), 对于一个给定的设备, 系统管理员也可以配置新的ID给一个设备.

关于probing这里有两种方式:
1) static
   
   给出一个pci id, 内核可以查找到正确的pci驱动.
2) dynamic
   
   通过用户配置的ID来查询, 实践中是很少使用的, 仅作为调试的目的. 动态的意思是系统管理员可以添加ID, 而不是说在运行过程中ID会改变.

注意动态的方式要在内核编译为支持可热插拔时才有效.

* 电源管理与Wake-on-LAN
电源管理事件是由pci_driver的suspend和resume函数处理. 除了处理pci的状态, 这些函数也需要做如下的一些事情:
1) suspend函数会停止设备上egress队列的数据传送.
2) resume函数会重新使能设备上的egress队列, 使得数据能重新传送.

Wake-on-LAN(WOL)功能允许NIC在收到一种特殊类型的帧时可以唤醒处于待机模式的系统, 更多的细节后面会介绍.



* PCI NIC驱动的初始化
现在来看一个具体的例子: e100网卡驱动的注册. 其代码位于:./drivers/net/ethernet/intel/e100.c.

首先是pci id表:
#+begin_src C++ :includes <stdio.h>
#define INTEL_8255X_ETHERNET_DEVICE(device_id, ich) {\
	PCI_VENDOR_ID_INTEL, device_id, PCI_ANY_ID, PCI_ANY_ID, \
	PCI_CLASS_NETWORK_ETHERNET << 8, 0xFFFF00, ich }
static const struct pci_device_id e100_id_table[] = {
	INTEL_8255X_ETHERNET_DEVICE(0x1029, 0),
	INTEL_8255X_ETHERNET_DEVICE(0x1030, 0),
  ...
}
#+end_src

从前文描述知道, PCI NIC驱动向内核注册一个pci_device_id类型的向量表来表明其能管理的设备. 如这里所示, e100驱动能管理的设备就是e100_id_table中所列的设备, 这里有几点需要注意:

1) 第一个域被初始化为了固定的PCI_VENDOR_ID_INTEL. 哪个厂商具有什么ID可以从linux/include/linux/pci_ids.h文件中得知.
2) 第三以及四个域(subvendor和subdevice)赋值为PCI_ANY_ID, 因为前两个域通常已经够用了.

该模块(驱动)的初始化函数为e100_init_module, 它会调用PCI层的pci_register_driver来向内核注册pci驱动. 

e100的几段关于PCI接口的关键代码如下:
#+begin_src C++ :includes <stdio.h>
static int e100_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
{
...
}

static void e100_remove(struct pci_dev *pdev)
{
...
}

static int __maybe_unused e100_suspend(struct device *dev_d)
{
...
}

static int __maybe_unused e100_resume(struct device *dev_d)
{
...
}

static struct pci_driver e100_driver = {
	.name =         DRV_NAME,
	.id_table =     e100_id_table,
	.probe =        e100_probe,
	.remove =       e100_remove,

	/* Power Management hooks */
	.driver.pm =	&e100_pm_ops,

	.shutdown =     e100_shutdown,
	.err_handler = &e100_err_handler,
};

static int __init e100_init_module(void)
{
...
    return pci_register_driver(&e100_driver);
}

static void __exit e100_cleanup_module(void)
{
	pci_unregister_driver(&e100_driver);
}
#+end_src
