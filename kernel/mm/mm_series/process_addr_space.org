#+TITLE: 进程地址空间
#+AUTHOR: Cauchy(pqy7172@gmail.com)
#+OPTIONS: ^:nil
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../../../org-manual.css" type="text/css">

虚拟内存的一个主要优点是每个进程都可以有它自己的虚拟地址空间，而虚拟地址空间又由操作系统映射到物理内存．这章会讨论下进程地址空间以及Linux如何管理它．

内核对待用户地址空间和内核空间是很不同的．比如，对于内核的内存请求会立即满足，而且不论在CPU上运行的是什么进程都是全局可见的．而对于进程来说，请求的空间只是通过将页表条目指向一个只读的全局的初始化为0的页面，这样可以做到在线性地址空间里预留一部分空间．到写的时候，触发page fault，这时才会真正的分配页面，并且将这个条目放在页表里．

用户地址空间是不可信任以及不是一成不变的，在上下文切换后，用户地址空间部分有可能会改变．因此，内核必须能够捕获所有来自用户空间的异常和地址错误．

本文首先介绍线性地址是如何划分以及各个部分的目的．随后会介绍描述每个进程的结构体，这些结构体是如何被分配，初始化以及怎么销毁的．随后会介绍进程的地址空间是如何创建的以及相关联的函数．这些会引入关于进程地址空间的异常处理，pagefault等其它机制．最后会介绍下如何安全的向用户空间拷贝数据或者从用户空间拷贝数据到内核空间．

* 线性地址空间

从用户的观点来说，线性地址空间是平坦的．但是从内核空间来说就很不一样了．地址空间被划分为两部分，用户空间部分，在上下文切换后可能会改变，而内核空间，保持不变．而划分出这个位置的就是PAGE_OFFSET，对于X86来说这个值是0xC0000000．这意味着3GB留给进程，而1GB留给内核空间，内核所看到的地址空间划分如下图：
#+CAPTION: 内核看到的地址空间
#+LABEL: fig:
#+ATTR_HTML: alt="" title="" align="center" :width 50% :height 50%
[[./img/kas.png]]

* 管理地址空间
进程用到的地址空间，由mm_struct结构体管理着，它类似于BSD里的vmspace．

每个地址空间都由一些页对齐的内存组成，这些页不会重叠．进程虚拟地址空间里又分许多的region，这些region由struct vm_area_struct结构体表示，举个具体的例子，一个region(struct
vm_area_struct)可能代表由malloc分配出来的堆，针对共享库的内存映射文件，以及mmap出来的匿名内存．针对区域里的页，也许是等待分配，也许是活跃的，也许在物理内存里，也许换出了．

如果一个region映射到一个文件，那么它的vm_file就会被设置．通过vm_file(file)->f_mapping(address_space)->host(inode)就可找到对应的文件不同结构体间的关系如下图：

#+CAPTION: 地址空间相关的结构体
#+LABEL: fig:
#+ATTR_HTML: alt="" title="" align="center" :width 30% :height 30%
[[./img/ds_as.png]]

* 进程地址空间描述符

* 内存区域（regions）

* 异常处理

* Page Fault

* 拷贝到/拷贝自用户空间
