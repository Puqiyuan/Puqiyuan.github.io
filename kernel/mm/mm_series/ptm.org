#+TITLE: 内存管理之页表管理
#+AUTHOR: Cauchy(pqy7172@gmail.com)
#+OPTIONS: ^:nil
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../../../org-manual.css" type="text/css">

本文讲述Linux的页表管理, 在它的上一篇讲述了mm模块[[./des-phy-mem.html][如何描述物理内存]].

本文会讲述Linux内核的页表是如何组织的, 以及各级页表都使用什么类型的数据结构来描述. 接着会讲述一个虚拟地址是怎样划分为几部分从而用来一级一级的往下寻找页表, 最后会到PTE(Page Table
Entry). 还会介绍一些宏用来查找页表. 对启动阶段的页表初始化也会作出阐述, 最后就是TLB和CPU的Cache也会被讲述到.

* 页目录表示
每一个进程都有一个指向它自己PGD的指针(mm_struct->pgd), 这实际是一个页框, 这个页框包含一个pgd_t类型的数组. 这个成员是架构相关的定义, 在asm/page.h中, 比如ia64中是这样定义的:
#+begin_src C++ :includes <stdio.h>
typedef struct { unsigned long pgd; } pgd_t;
#+end_src

根据架构的不同，页表如何被加载也是不同的。以x86为例，进程页表的加载是通过将mm_struct->pgd复制到cr3寄存器中，同时会刷新tlb。

每一个pgd页表里的条目指向包含有许多pmd条目的页框基地址，pgd页表本身的基地址如前所述在x86下是将mm_struct->pgd拷贝到cr3寄存器中，而每一个pmd条目又指向包含有许多pte条目的页框基地址，
pte条目最终指向包含有用户所请求数据的页框基地址。如果是遇到page被swap out的情况，就会调用do_swap_page函数。页表组织如下图：

#+CAPTION: 各级页表的组织
#+ATTR_HTML: :align centering
#+ATTR_HTML: :width 50% :height 50%
[[./img/page_layout.png]]

一个给定的线性地址会划分为几个部分来表明在各级页表中的偏移。为了辅助将线性地址划分为几部分，对于每级页表，都有几个宏来完成一些功能，也就是SHIFT，SIZE以及MASK宏。SHIFT类的宏指明了每级页表能映射的长度（按bit算）。如下图：

#+CAPTION: 各类SHIFT宏
#+ATTR_HTML: :align centering
#+ATTR_HTML: :width 50% :height 50%
[[./img/shift-macro.png]]

我们可以看看内核中关于SHIFT类宏的定义（ia64）：
#+begin_src C++ :includes <stdio.h>
#if defined(CONFIG_IA64_PAGE_SIZE_4KB)
# define PAGE_SHIFT	12
#elif defined(CONFIG_IA64_PAGE_SIZE_8KB)
# define PAGE_SHIFT	13
#elif defined(CONFIG_IA64_PAGE_SIZE_16KB)
# define PAGE_SHIFT	14
#elif defined(CONFIG_IA64_PAGE_SIZE_64KB)
# define PAGE_SHIFT	16
#+end_src

PAGE_SHIFT表示了一个页面的大小，可以看到ia64架构下，可以配置不同的页面大小。再来看看PMD_SHIFT（同样是ia64）：

#+begin_src C++ :includes <stdio.h>
#define PTRS_PER_PTD_SHIFT	(PAGE_SHIFT-3)
#define PMD_SHIFT	(PAGE_SHIFT + (PTRS_PER_PTD_SHIFT))
#+end_src

其中PTRS_PER_PTD_SHIFT表示了一个页表能包含的下级页表基地址（指针）数量。对于ia64如果配置了四级页表，还有PUD_SHIFT，看看定义：
#+begin_src C++ :includes <stdio.h>
#define PUD_SHIFT	(PMD_SHIFT + (PTRS_PER_PTD_SHIFT))
#+end_src
最后是PGDIR_SHIFT的定义了，它也依是否开启4级页表其定义而有所不同：
#+begin_src C++ :includes <stdio.h>
#if CONFIG_PGTABLE_LEVELS == 4
#define PGDIR_SHIFT		(PUD_SHIFT + (PTRS_PER_PTD_SHIFT))
#else
#define PGDIR_SHIFT		(PMD_SHIFT + (PTRS_PER_PTD_SHIFT))
#endif
#+end_src

而MASK值可以和线性地址进行AND操作从而取出其高位部分的比特，经常被用来确定一个线性地址是否在给定级别的页表上对齐。而SIZE宏主要用来表明各级别页表里的条目能寻址多少字节。SIZE与MASK宏的关系如下图：
#+CAPTION: SIZE与MASK宏
#+ATTR_HTML: :align centering
#+ATTR_HTML: :width 50% :height 50%
[[./img/size-mask.png]]

下面以X86为例来说下这三个类型的宏是如何计算的，其中SHIFT宏较为重要，因为其它的宏都是基于这个宏计算的。在X86上的三级页表下：
#+begin_src C++ :includes <stdio.h>
/* PAGE_SHIFT determines the page size */
#define PAGE_SHIFT		12
#define PAGE_SIZE		(_AC(1,UL) << PAGE_SHIFT)
#define PAGE_MASK		(~(PAGE_SIZE-1))
#+end_src

PAGE_SHIFT其实就是线性地址中offset部分的比特数目，X86下是12比特。一个页面的大小可以通过2^PAGE_SHIFT来算出。PAGE_MASK就是PAGE_SIZE-1再取反。如果一个页面需要在页边界对齐，PAGE_ALIGN宏可以使用。其它级别的MASK和SIZE可以类似方式计算出。


* 页表条目表示
如前所述, 对于PTEs, PMDs以及PGDs来说, 分别由结构体pte_t, pmd_t以及pgd_t结构体来表示. 即使这些结构体里的成员只有一个unsigned的成员, 但是依旧被定义成结构体, 这主要有两个目的, 一是起
到类型保护的作用, 避免被不恰当的使用. 第二个目的就是, 像在x86中使用的PAE的特点, 有特别的四个比特用来寻址超过4GB的物理内存. 为了存储保护比特, 定义了prprot_t类型, 它会存储相关的标志并且通常是存在一个页表条目的低比特位.

对于类型转换来说, 在asm/page.h里提供了四个宏, 参数是前面提到的四种类型, 然后返回结构体相关类型的值. 这些宏是pte_val, pmd_val, pgd_val以及pgprot_val(). 对于取逆类型转换, 提供了四个宏: __pte(), __pmd(), __pgd()以及__pgprot().

究竟在那些位置上存储保护比特依各个架构不同. 为了解释方便, 采用的例子是没有开启PAE的x86架构,
但是相同的原则几乎可以应用在所有架构上. 在X86上(没有开启PAE), pte_t是存放在结构体里的32-bit整数. 每一个pte_t条目都指向页框里的一个地址, 并且所有被指向的地址都保证对齐在页边界. 因此在每一个页表条目中, 都有PAGE_SHIFT(12)个比特可以自由的用来标记状态. 一些保护和状态比特在下表列出, 不过究竟有哪些比特存在以及它们的具体意义如何却可能因架构的变化而不同:

| 比特           | 功能                             |
|----------------+----------------------------------|
| _PAGE_PRESENT  | 页面在内存中并且没有被换出       |
| _PAGE_PROTNONE | 页面在内存中, 但是不可访问       |
| _PAGE_RW       | 如果页面可写就设置               |
| _PAGE_USER     | 如果页面可以从用户空间访问就设置 |
| _PAGE_DIRTY    | 页面被写过                       |
| _PAGE_ACCESSED | 页面被访问过                     |

* 使用页表条目
定义在pgtable.h中的一些宏, 可以用来检查和查看页表条目. 有三个重要的宏, 用来把线性地址分解为它们的组成部分. pgd_offset使用传入的两个参数, 一个地址以及一个mm_struct结构体, 返回一个pgd条目:

#+begin_src C++ :includes <stdio.h>
#ifndef pgd_offset
#define pgd_offset(mm, address)		pgd_offset_pgd((mm)->pgd, (address))
#endif

static inline pgd_t *pgd_offset_pgd(pgd_t *pgd, unsigned long address)
{
	return (pgd + pgd_index(address));
};

#ifndef pgd_index
/* Must be a compile-time constant, so implement it as a macro */
#define pgd_index(a)  (((a) >> PGDIR_SHIFT) & (PTRS_PER_PGD - 1))
#endif
#+end_src

而pmd_offset使用传入的两个参数, 一个地址和一个PGD条目, 返回相关的PMD条目. 下面的宏用来确定相应的页表条目项是否存在或者是否在使用:

- 如果对应的条目不存在, pte_none(), pmd_none()等返回1:
  #+begin_src C++ :includes <stdio.h>
  #define pte_none(pte) 			(!pte_val(pte))
  # define pte_val(x)	((x).pte)

  #define pmd_none(pmd)			(!pmd_val(pmd))
  # define pmd_val(x)	((x).pmd)
  #+end_src


- 如果对应的页表条目有PRESENT比特被设置, pte_present(), pmd_present()等返回1:
  #+begin_src C++ :includes <stdio.h>
#define pte_present(pte)		(pte_val(pte) & (_PAGE_P | _PAGE_PROTNONE))
#define pmd_present(pmd)		(pmd_val(pmd) != 0UL)
  #+end_src

- pte_clear(), pmd_clear()等将会清除对应的条目:

  #+begin_src C++ :includes <stdio.h>
#define pte_clear(mm,addr,pte)		(pte_val(*(pte)) = 0UL)
#define pmd_clear(pmdp)			(pmd_val(*(pmdp)) = 0UL)
  #+end_src
* 翻译与设置页表条目
有一组宏和函数用来映射地址和页面里的PTE条目, 以及设置单个条目.

宏mk_pte使用两个参数, 一个是struct page, 另一个是protection bit, 将它们组合起来从而形成pte_t可以插入到页表中. 另一个相似的宏是mk_pte_phys, 只不过它的参数是物理页面地址.

pte_page宏返回struct page, 这个页面对应pte条目. pmd_page返回一个struct page包含pte条目.

而set_pte宏可以使用mk_pte宏返回的参数去设置pte条目到进程的页表, pte_clear的作用就相反了.

* 分配以及释放页表

