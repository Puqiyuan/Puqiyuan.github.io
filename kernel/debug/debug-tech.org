#+TITLE: 内核调试手段及工具
#+AUTHOR: Cauchy(pqy7172@gmail.com)
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../../org-manual.css" type="text/css">
#+OPTIONS: ^:nil
本文介绍内核调试的各种技术，想要指出的是工具或手段都只是一个途径，它不会决定对于问题的本质理解。深刻理解内核的基础，再加以熟练于工具，才能高效而又准确的发现问题根因。

内核编程有它自己的独一无二的调试困难。内核代码不容易在调试器中运行，它也不容易被trace，因为它不是一个进程。内核代码的error也是极其难以复现的。本文会介绍一些技术用来排查内核bug。

内核带有一些调试的feature，这需要自己编译内核打开选项．下面介绍一些这些选项，注意不是所有的选项在所有的架构都支持．

+ CONFIG_DEBUG_KERNEL

  这个选项仅是使得其它调试选项可提供，它应该被打开以使得其它选项可用．
+ CONFIG_DEBUG_SLAB

  这个选项用来检查内核内存分配．打开时就可以检测到超限使用和错误初始化的错误．每个分配出去的内存字节在交给调用者前都会设置为0xa5，而在释放后又会设置为0x6b．另外内核也会在分配的对象前后放置上特别的保护值（guard values），如果这些特别的值被改变，那么内核就知道有人在超出限制的使用分配的内存，就会严重警告．另外还有一些其它的检查．

+ CONFIG_DEBUG_PAGEALLOC

  当页面从内核地址空间释放时，全部的页面都会释放．这会减慢一些效率，但是对某些内存污染问题可以较快的定位出来．

+ CONFIG_DEBUG_SPINLOCK

  打开这个选项时，内核会捕获未初始化的spinlock以及各种各样的其它错误，比如unlock一个锁两次．

+ CONFIG_DEBUG_SPINLOCK_SLEEP

  这个选项会检查，当持有一个spinlock时却尝试睡眠．

+ CONFIG_INIT_DEBUG

  在系统完成初始化或模块加载后，标记为__init或__initdata的项目就会被丢弃．这个选项使得在初始化完成后再访问初始化期间的内存成为可能．

+ CONFIG_DEBUG_INFO

  
