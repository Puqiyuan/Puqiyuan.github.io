#+TITLE: 中断与异常
#+AUTHOR: Cauchy(pqy7172@gmail.com)
#+OPTIONS: ^:nil
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../../org-manual.css" type="text/css">

本文讲述Linux的中断和异常。

中断通常定义为可以修改指令流的事件。这些事件都对应着电信号，电信号的可以来自CPU芯片内部或外部。

中断通常可以划分为两类，同步与异步，所谓同/异步：
- 同步中断：
  1) 由CPU控制单元发出。
  2) 在指令执行结束时调用。
- 异步中断：
  1) 由其它硬件生成。
  2) 相对于CPU的时钟来说，其发生时机是任意的。

中断由CPU内部定时器或I/O设备发出，比如用户敲击键盘就会产生中断。

异常就是由程序异常或其它异常条件发生时产生。前一种情况，内核发送信号给产生异常的进程。而后一种比如有Page faule或经由int(sysenter)指令来请求内核服务，这时内核会执行 *一系列步骤* 然后从 *异常中恢复* 。

* 中断信号的作用
中断信号提供了一种能力，它可以使得CPU转移(divert)出正常的指令执行流。中断信号到来时，CPU必
须停下它正在做的事情并切换到新的代码路径上。这通过以下两点做到：
1) 把当前的程序计数器（PC，program counter）存到内核态栈上（Kernel Mode stack）。
2) 放置与引起中断相关的服务例程到PC里。

这些文字可能会让我们联想到进程切换，不过中断处理和进程切换是完全不同的：
1) 执行中断/异常的代码可不是进程的代码。
2) 它是一种控制路径（control path），当中断发生时，代表进程执行。
3) 这种control path比起进程，它更加轻量，具有更少的上下文和处理时间。

* 中断、异常对比
英特尔文档对中断和异常做如下的归类：
1) 中断：
   1) 可屏蔽中断
      
      由I/O设备发出的中断都是可屏蔽的，可屏蔽中断有两种状态，屏蔽或非屏蔽，屏蔽了的中断会被CPU忽略。
   2) 不可屏蔽中断
      
      一些很关键的事件（比如硬件错误）是不能屏蔽的，这些中断一定会被CPU识别。
2) 异常：
   1) 处理器可检测异常
    
      在CPU执行指令的时候检测到的异常，其可分为三类。
      1) Faults
         
         这种类型的异常通常是可以被纠正的，eip寄存器存的就是当前引起Faults的指令。当相应的异常句柄执行完毕后，就会由eip指令处继续执行。比如page fault就有对应的异常句柄，就
         是此类的。 *这里eip存的是引起Faults的指令，等到异常句柄执行完毕返回时，也会从这条指令开始执行。*
      2) Traps

         *eip存放的是引起Traps指令的后一条指令。* Traps异常的情况不会再一次执行引起Traps的指令，这主要用于debugger，这里主要通知debugger一个特别的指令被执行了（比如breakpoint断点指令）。
      3) Aborts

         发生了一个严重的错误，有可能引起异常的指令都不能存在eip寄存器中，这些严重的错误比如有硬件错误或者系统的表等数据处于不一致或无效状态，相应的异常处理句柄只能中止相关进程。
      
   2) 程序异常

      依程序员的请求而发生的异常，比如由int或int3指令引起，通常是作为traps来处理。这种异常有两种常见的用途：实现系统调用或通知调试器一个特别的事件发生了。

 中断或异常由一个0-255范围的数字来标识，Intel将这个8-bit的数字叫做向量。不可屏蔽中断的号码是固定的，而可屏蔽中断的数字是可以通过编程中断控制器来改变的。
* IRQ与中断
每一个可以发出中断的硬件（控制器）都有一个与之关联的输出线：Interrupt ReQuest(IRQ)线。所有
的IRQ线又连接到中断控制器（一种电路）的输入管脚中，这个中断控制器会执行如下动作：
1) 监控所有的IRQ，检查是否中断信号到来，如果有多个中断信号到来的话，就选择其中一个较小的号
   码。
2) 对于选中的IRQ：
   1) 将收到的信号转换为对应的向量。
   2) 将转换好的向量存到中断控制器的I/O端口，这样CPU就可以通过数据总线来读取了。
   3) 发送一个信号到CPU的INTR管脚，也即发起中断。
   4) 等待CPU确认中断，然后会写一个PIC（Programmable Interrupt Controllers）的端口，随后清除INTR线。
3) 回到第一步中重复执行。

IRQ号码通常是由0开始的连续序列号，所以第一个IRQ号码通常就是0。Intel默认的向量和IRQ线的对应关系是IRQn的向量为IRQn+32，这种映射关系是可以通过运行I/O指令修改中端控制器的port来改变的。

IRQ可以被disable，disable的IRQ，其实就是中断控制器在对应的IRQ线上不给CPU的INTR管脚发送信号，但是这并不意味着相关的中断信号就丢失了，只要IRQ被enable了，这些信号就会被再一次发送。

disable/enable IRQ都是针对某个具体的IRQ线，而对eflags寄存器的IF标志位进行操作则可以使得 *所有可屏蔽* 中断被忽略，cli和sti指令分别用来清除或设置这个标志。

传统的PIC以“级联”方式连接在一起，每个芯片都可以8个IRQ，但是从PIC的INT管脚和主PIC的IRQ2连在
一起，所以总的可用的IRQ线其实只有15条。
** 高级可编程中断控制器（APIC）
