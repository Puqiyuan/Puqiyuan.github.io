#+TITLE: Linux线程之一
#+AUTHOR: Cauchy
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../org-manual.css" type="text/css">

本文是讲述Linux线程系列文章的第一篇。

* 介绍
在单个进程的环境里可以利用线程去执行多个任务，在单个进程的环境里，这些线程共享许多资源，包
括文件描述符以及内存。本文先讲述一些线程的基本概念，然后是一些API介绍以及示例用法，有些程
序被故意写的“不完美”，以使读者深刻线程中的种种陷阱。一旦涉及“共享”就存在同步与竞争问题，本
文以线程同步结束，这是使用线程编程的一个最头疼的问题。
* 基础概念
传统的进程通常都是单线程的，使用多线程可以做到同时（单处理器不是严格的同时）处理多个任务。
这主要有以下几个优点：
+ 分开任务到另一个线程去可以使得编程模型成为同步模型，这比异步编程模型更简单。
+ 操作系统提供了进程间的共享机制，但这个机制比较复杂。所有线程共享进程的地址空间，这使得线
  程间的资源贡献变得简单。
+ 线程是操作系统调度的最小单元，多线程意味着当某个线程无事可做时，程序中的另外部分（其它线
  程）仍旧有机会得到操作系统的调度。挖掘程序中的并行性，多线程可以显著提高程序的吞吐量。
+ 多线程还可以用来改善程序的响应时间。假如一个程序的计算时间较长，如果使用单线程，会使得程
  序长期卡在计算部分，对于用户交互的程序来说，这是不可接受的，人类的耐心通常非常有限，而把
  交互部分独立成线程可以缓解这个问题。

某些人把多线程与多处理器（核）等同起来，认为只有多核系统才能充分利用多线程。这实际上是有
一定误解的。要理解多线程的本质： *将原本以单线程运行的程序，划分几部分出来后创建新的线程去执行。* 这种做法增加了操作系统调度到本程序的机会。即使有线程当前被阻塞了，也会有其它线程
被调度到继续执行。这样仍旧可以改善响应时间以及吞吐量， *只要程序中存在并行性或有阻塞部分都可以尝试多线程。*

一个线程代表了一个执行环境。一个线程ID来代表哪个线程、寄存器值、栈、调度优先级与策略、
errno以及信号。在进程里的一切所有线程都是共享的，比如程序的代码段、全局与堆内存以及文件描述
符。
* API
接下来介绍用于操纵线程的POSIX标准API。这些API可以用宏 =_POSIX_THREADS= 以#ifdef的形式来测试是
否支持POSIX的线程相关的API，也可以调用sysconf在运行时来检测。

* 线程同步
