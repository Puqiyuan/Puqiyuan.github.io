#+TITLE: 即时编译器函数库第21节中文文档
#+AUTHOR: Cauchy
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="https://cs2.swfu.edu.cn/org-info-js/org-manual.css" type="text/css">
本文翻译自[[https://www.gnu.org/software/libjit/doc/libjit_21.html#Porting][libjit移植到新的架构体系]]，如有任何疑问，联系pqy7172@gmail.com。推荐你在电脑上查
看此页面。

本章描述了将 =libjit= 移植到一个新的架构所需要做的事情。本文将假设读者已经熟悉编译器实现技
术以及目标CPU的指令集。

在接下来的文档里，我们将会使用 =ARCH= 来指代架构体系的名字。通常，特别指定的CPU体系以小写
字母出现（比如 =x86= ， =arm= ， =ppc= ）。按照惯例，所有后端函数都应该加上前缀 =_jit= ，
因为它们不是公共API的一部分。

* 移植应用工具集
将 =libjit= 移植到一个新的体系架构需要做的第一件事是移植 =jit_apply= 工具集。这为从你的
应用程序或JIT代码中调用任意的C函数提供了支持。如果你对 =libffi= 或 =ffcall= 比较熟悉，
=jit_apply= 提供了类似的功能。

即使你不打算编写一个本机代码生成器，你依然需要将 =jit_apply= 移植到新的体系架构。

=libjit= 函数库利用gcc中的 =_builtin_apply= 来完成函数应用中的大部分困难的工作。这个gcc工
具集接受三个参数：一个指向要调用函数的指针，一个包含寄存器参数的结构以及一个大小值，它用来
表明有多少字节数被压栈以作调用。

=stack_args=
#+BEGIN_QUOTE

#+END_QUOTE



