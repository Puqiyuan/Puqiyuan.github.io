#+TITLE: 协程切换实现
#+AUTHOR: Cauchy
#+EMAIL: pqy7172@gmail.com
#+OPTIONS: ^:nil
#+HTML_HEAD: <link rel="stylesheet" href="https://cs3.swfu.edu.cn/~puqiyuan/org-manual.css" type="text/css">
如果你在阅读本文时有任何疑惑，我多半怀疑那是我没有表达清楚，因为讲清楚切换这种细微的事并不
是一件容易的事。我希望你投入到本文档的时间是值得的，能收获一些东西，所以如果有任何疑问请联
系作者pqy7172@gmail.com。

在X86、X86-64平台上协程切换已得到实现的情况下，本文打算在ARM32、ARM64平台上实现同样的功能。在
文尾还将介绍一种在已知机器指令的情况下如何获得栈大小的方法。

* 协程概念
进程是资源分配的基本单位，这些资源包括内存空间，文件表，外部设备等，而线程是CPU调度的基本
单位。

协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的上下文和栈。协程调度
切换时，将寄存器上下文和栈保存到其它地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，
直接操作栈则基本没有内核切换的开销，所以上下文切换用时很少。注意本文在进行这些切换
操作时并不涉及段的变化。

协程切换是用户空间的事，通过避免通常的切换陷入内核而带来的时间开销，这种切换较传统的上下文
切换具有较高的效率。

* 架构介绍
本节将对X86、X86-64、ARM32、ARM64几种平台逐一进行介绍。当然完全的介绍一种体系结构超出了本
文的范围，如果读者对此有兴趣，请参考相应官方手册。我仅关心之于我的目的所需要的体系结构的背
景知识。这些背景知识包括寄存器介绍，调用惯例，常用指令。

寄存器包括通用寄存器和特殊寄存器，一般架构层面会规定出哪些寄存器是特殊的，另一方面，编译器
也会说明一些通用寄存器来作为特别的目的。在操作这些特殊寄存器时要特别注意。

调用惯例作出了调用者（caller）和被调用者（callee）之间的一系列约定，这些约定包括参数如何传
递，哪些寄存器被调用者可以覆盖，被调用者的局部变量应存于何处，结果应如何返回等。之于协程切
换的目的，仅需关心参数如何传递并且只有一个参数的情况。

本文所涉及的四个平台常用指令都大同小异，下文具体到某个平台时再作详细介绍。

CPU架构经常的被分为复杂指令集（[[https://en.wikipedia.org/wiki/Complex_instruction_set_computer][CISC]]）与精简指令集（[[https://en.wikipedia.org/wiki/Reduced_instruction_set_computer][RISC]]）。常见的复杂指令集体系结构包括X86、
X86-64。常见的精简指令集包括ARM系列。二者在设计指令集时是完全相反的思路，CISC希望能在一个
时钟周期内完成更多的事情，而RISC希望做更少的事情。这样CISC的指令集会较复杂，硬件电路设计会
变得很复杂，但对于汇编程序编写较容易，而RISC具有相反的特点。在后文的[[arm32arm64][编码实现]]一节我们会看到这些
不同的指令集设计哲学是如何影响到我们的汇编程序编写。网上有许多关于这二者设计思想有意思的讨
论，可Google"cisc vs risc"。

以下针对体系结构的介绍仅涉及我们所需要的体系结构知识，其所述理论仅是相应体系结构的一个子集。
** X86
<<x86intro>>
本文所指X86具体为Intel 8086系列，这些CPU拥有32位字宽。
- 寄存器：包括八个通用寄存器eax、ebx、ecx、edx、esi、edi、ebp、esp。一个特殊寄存器eip用来指向当前
  所要运行的指令。通常编译器会赋予某些通用寄存器以特殊的用途，但体系结构层面并未如此强制要
  求，这一点下面的其它体系结构类似。这些由编译器指明的特殊寄存器的常见用途包括：
  - esp：栈指针，指示栈顶在何处。
  - ebp：指示栈基址。
    <<x86call>>
- 调用惯例：参数被压栈。
- 常用指令：
  - movl：在内存与寄存器或寄存器与寄存器之间移动数据。
  - pushl：将内存或某个寄存器的内容压栈。
  - ret：返回调用者。
  - leal：将操作数所指地址而非内容加载到寄存器或内存地址中。
  - subl：将两个操作数做减法。
  - jmp：无条件跳转。

** X86-64
X86-64架构时X86架构的64位版，此架构具有64位机器字宽。
- 寄存器：包括16个通用寄存器rax、rbx、rcx、rdx、rsi、rdi、rbp、rsp、r8、r9、r10、r11、r12、r13、
  r14、r15。一个特殊寄存器rip用来指向当前所要运行的指令。编译器赋予的特别用途的寄存器包括：
  - rsp：栈指针，指示栈顶在何处。
  - rbp：指示栈基址。
- 调用惯例：第一个参数被传往rdi寄存器。
- 常用指令：
  与X86类似，只是后缀l变为q，代表64位，而l代表32位。

** ARM32
此架构是ARM的32位版，ARM V7及以前的版本是为32位。
- 寄存器：包括r0-r10共计11个通用寄存器以及以下的特殊寄存器，括号内为其别名：
  - r11(fp)：栈基址寄存器。
  - r12：存储系统调用的号码。
  - r13(sp)：指示栈顶。
  - r14(lr)：存储返回地址。
  - r15(pc)：程序计数器，指示当前运行的指令。下面是一个关于X86和ARM寄存器的对应表格。
    #+ATTR_HTML: :border 2 :rules all
    | ARM     | 作用       | x86                     |
    |---------+------------+-------------------------|
    | r0      | 通用寄存器 | eax                     |
    | r1-r5   | 通用寄存器 | ebx, ecx, edx, esi, edi |
    | r6-r10  | 通用寄存器 |                         |
    | r11(fp) | 栈基址     | ebp                     |
    | r12     | 系统调用   |                         |
    | r13(sp) | 栈指针     | esp                     |
    | r14(lr) | 链接寄存器 |                         |
    | r15     | 程序计数器 | eip                     |
    
- 调用惯例：第一个参数会被送到r0寄存器。
- 常用指令：
  - str：将寄存器的值存到内存。
  - mov：在两个寄存器间移动值。
  - ldr：将内存中的某个值加载到寄存器。
  - push：将寄存器的值压栈。
  - add：对操作数执行加操作。


** ARM64
ARM V8及以后的版本为64位。
- 寄存器：x0-x30共计31个寄存器。x31依使用环境决定是用作什么目的的寄存器，作为栈时写作sp。
  特殊目的的寄存器包括：
  - x29：栈基址。
  - x30：链接寄存器，用于存放返回地址。

- 调用惯例：第一个参数被传往x0寄存器。
- 常用指令：与ARM32类似，不同的是，ARM64下操作栈用stp和ldp指令并保证操作栈时16字节对齐，而
  不是ARM32的push与pop。返回调用调用者时用ret。
  
    
* 实现原理
<<原理>>
本节将概要介绍实现原理，而具体的代码实现细节留待下节。讨论实现时，协程（coroutine）、上下
文(context)、任务(task)它们几者互为同义词。在讨论实现时，我更愿意用任务，而实现程序中多用
上下文。

在CPU里定义任务环境：就是所有寄存器的内容。对于任务切换，我们需要保存当前任务环境，并恢复
新任务的任务环境同时切换到新任务去运行。本实现分为两个方式：具有参数和不具有参数的切换。对于
带参的，还需要按照调用惯例把参数传到相应的位置。

当前的任务环境存放到某个内存地址，而在另一个内存地址又存放着新任务的任务环境。当然，任务环
境是一个较大的结构体，因为要存储和恢复的不只是一个寄存器，以上述两个内存地址作为基址，偏移
一定的字节就得到各个寄存器的内容。

下面这个图来解释实现原理应该会更加清晰：

#+BEGIN_EXAMPLE
________________________________________________________
--------- current task          --------- resuming task |
|  r0   | store address         |  r0   | memory address|
---------                       ---------               |
|  r1   |                       |  r1   |               |
---------   \            /      ---------               |
|   .   |    \          /       |   .   |               |
|   .   |    1\        /2       |   .   |               |
               \      /                                 |
_____________________________________________memory_____|               
              ----------
              |switcher| the codes that you implement
              ----------
              /|\     |2
              1|     \|/
           ----------------
           |r0, r1, r2, r3|
           |r4, r5, r6, r7|
           |     ...      |
           ----------------
                 CPU
#+END_EXAMPLE

* 编码实现
<<编码实现>>
此节将会详细讨论各个平台上的协程切换实现细节。尽管总体原理相似，但具体到实现层面依然有许多
待解决的问题，接下来一一讨论。

** X86
<<x86>>
X86上的实现将会详细介绍，而其它架构的介绍会相对粗略。
*** 准备
<<准备>>
首先需要定义偏移，以定出偏移多少字节是哪个寄存器的内容。
#+INCLUDE: "../coroutineARM64/pub_arch.h" src c:lines "19-27"
其中，COROUTINE_WORD_SIZE是机器字宽，对于X86是4字节。

接下来需要将两个内存地址传递到栈上，以便协程切换时使用，这两个地址是用户给出。以下内联汇编
完成了这个工作：
<<jmpcall>>
#+INCLUDE: "../coroutineARM64/pub_coroutine.h" src c:lines "53-56"
关于内联汇编的知识可以参考[[https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html][这里]]。请注意这段代码只是Jmp方式的切换，即新任务不带参运行。先是
开栈，然后先把下一个要运行的任务地址入栈，接下来用来存储当前任务环境的内存地址入栈。


做好了准备工作就可以正式进行切换工作了。下面的两小节都是核心的切换代码部分，它包括保存当前
任务环境和恢复新任务环境两大部分，注意这只是Jmp方式的切换，即 =CoroutineX86Jmp= 函数。最后
会给出Call方式实现与Jmp的不同之处。

*** 保存任务环境
第一步当然是保存当前的任务环境：
<<codejumpstore>>
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "32-46"

下面一一分析这段代码以及其中隐藏的陷阱。

由于要用eax寄存器，所以首先将eax进行了压栈。
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "32-33"
这一步完成之后，栈的结构如下图：
<<stack>>
#+BEGIN_EXAMPLE
16------------------- high address
  | gotoContextAddr |
12-------------------
  | nowContextAddr  | stack     |
8 ------------------- growth    |
  | return address  | direction |
4 -------------------           |
  |       rax       |          \./
0 ------------------- sp
  |        .        |
  |        .        | low address
#+END_EXAMPLE
其中， =gotoContextAddr= 和 =nowContextAddr= 是在[[准备][准备]]一节压入栈的，而在那一节调用
=CoroutineX86Jmp= 函数时，会将 =return address=
压入栈。接下来取到用来存储当前任务环境的内存地址到eax：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "33-34"

注意 =COROUTINE_WORD_SIZE*0x2= 为8，正好是用来存储当前任务环境的内存地址在栈中的偏移。

接下来就是存储ebx、ecx、edx、esi、edi、ebp寄存器的内容，以先前定义好的偏移来存储。
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "34-40"
直到要存储esp时，发现它的存储与前述几个寄存器都不一样，不再那么简单直接。这就引出存储当前
任务环境时极其重要的一点意识：
<<import>>
*进行存储的过程中，一定不能破坏进入到切换代码前(也就是我们自己写的汇编代码)的任务环境。*
这一点相当重要，如果在编写切换代码过程中稍微不记住这点，就可能会引起难以察觉令人抓狂的bug。
我们来看这两行代码：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "40-42"
[[x86intro][前文]]介绍过leal指令的作用，它并不是将栈偏移 =COROUTINE_WORD_SIZE*0x4=
为16的地址的内容给ecx寄存器，而是将这个地址给ecx。接着又将这个地址存到当前任务存储地址起始
偏移 =COROUTINE_X86_REG_GEN_ESP= 也就是说 =sp+16= 作为了当前任务环境的栈指针，这是合理的，
因为[[stack][图中]]栈上的元素都是我们切换器代码压入的，这些压入动作影响了原来当前任务的栈指针，回退16
字节才是当前任务环境的栈指针。

当前任务环境的eip存储也不那么直接简单，这涉及有关切换的几个任务之间的关系分析。下图应该能
清晰反映调用者（caller）、切换代码（switcher）、存储当前任务环境的内存地址(current task)三
者之间的关系。

#+BEGIN_EXAMPLE
   caller                              stack                                      current task
-------------  1:put return        -------------                                    --------
|statement 1|  return address    \ |    ...    |                                    |  r0  |
|   call----|--------------------- ------------- return address ---------- 3:store \--------
|statement 3|         |          / |statement 3|----------------|switcher|----------|  eip |
|    ...    |         |            -------------                ---------- return  /|   .  |
                      |            |    ...    |                   /|\     address  |   .  |
                      |                                             |               -memory-
                      |_____________________________________________|              context of
                                     2:call switcher                                 caller
#+END_EXAMPLE     
X86架构在调用函数（ =CoroutineX86Jmp= ）时会自动将返回地址压栈，图中步骤1，在调用
=CoroutineX86Jmp= 后， =CoroutineX86Jmp= 也将作为一个任务，但我们要保存的是调用者（caller）
的返回地址。

所以接下来保存eip的代码就不难理解了：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "42-44"
=COROUTINE_WORD_SIZE*0x1= 为4，即是返回地址在栈上的偏移。
最后一步保存eax寄存器的值，eax在栈顶，一进来 =CoroutineX86Jmp= 函数eax就被压栈保存了。
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "44-46"

完成了当前任务环境的保存，接下来应该恢复要运行任务的任务环境。
*** 恢复任务环境
这段代码是 =CoroutineX86Jmp= 的第二部分，代码如下：
<<codejumpresume>>
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "48-59"
下面逐一分析这段代码。

根据实现[[原理][实现原理]]，要恢复运行任务的环境存放于某个内存地址，在[[准备][准备]]一节我们又把它移到了栈上。
所以首先是取出这个任务的地址：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "48-49"
接下来就是一串的恢复寄存器：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "49-56"

在恢复eip时，我们又遭遇了不那么简单直接的操作，这涉及X86的程序控制转交机制。最后一句指令是
ret，这句指令具体所作是将控制流转移到栈顶所存的地址，所以先就将要恢复任务的eip压到了栈上，
现在来看下面的代码就不难理解了：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "56-60"

*** Call方式
Call方式多了一个参数，导致了其栈结构与Jmp方式不一样，其它类似于Jmp方式的实现，根据X86的[[x86call][调
用惯例]]，我们要保证在切换到新任务运行前参数被放置于正确的位置－即栈上。

以下代码是调用 =CoroutineX86Call= 的代码：
#+INCLUDE: "../coroutineARM64/pub_coroutine.h" src asm:lines "43-46"
可以看到，其与Jmp方式的[[jmpcall][调用]]并无本质区别，只是多压了一个参数入栈并且相应的调整了开栈的大小。

下面也是保存当前任务环境：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "66-80"
在第一句 =pushl %eax= 后其栈结构与[[stack][Jmp方式]]的栈结构有所区别：
#+BEGIN_EXAMPLE
20------------------- high address
  |      param      |
16------------------- 
  | gotoContextAddr |
12-------------------           |
  | nowContextAddr  | stack     |
8 ------------------- growth    |
  | return address  | direction |
4 -------------------           |
  |       rax       |          \./
0 ------------------- sp
  |        .        |
  |        .        | low address
#+END_EXAMPLE
所以保存当前任务环境的代码就没什么新鲜的了。与[[codejumpstore][Jmp方式]]的不同就是保存栈顶时偏移为20，这是自
然的，因为多了一个参数压栈。
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "74-75"
在恢复时，大体也与[[codejumpresume][Jmp方式]]类似：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "82-97"
需要关注的不同就是其参数的确传到了栈顶：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "83-84"
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "93-94"

** X86-64
在[[X86][X86]]中详细讨论了实现原理，所以在X86-64下的实现只会概述其与X86实现的不同，本小节尾会列出本
架构Jmp方式实现的代码，为避免冗余，其它代码不予列出。

Jmp与Call的实现均与X86下的实现类似，只是指令后缀为q代表64比特，并且多保存或恢复了几个寄存
器。

调用：
#+INCLUDE: "../coroutineARM64/pub_coroutine.h" src c:lines "132-141"
保存当前任务环境：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "131-153"
恢复下一个任务环境：
#+INCLUDE: "../coroutineARM64/coroutine.S" src asm:lines "155-174"

** ARM32与ARM64
<<arm32arm64>>
明白了X86系列的实现，ARM上的实现应该也能简单起来。需要注意的是X86实现下的指令如何与ARM架构
下的指令对应起来。ARM32的切换是通过改变r15寄存器做到的，而ARM64是通过br或ret指令。实现Call
带参方式时，参数要保证传到对应的地方，ARM32是r0寄存器而ARM64是x0寄存器。在X86下很多指令都
可以直接操作内存，操作内存在指令层面可以算是一个复杂的事情，这在X86上很多指令都可以做到，
这是因为X86基于复杂指令集，而ARM下仅有两条指令可以操作内存，ldr，str，在X86上可以直接对内
存的值进行计算，但是在ARM下，必须用ldr将内存的值加载到某个寄存器中才能进行运算，这给编写
ARM汇编程序带来了不少麻烦。另外，在ARM64下我们不能像ARM32下那样直接操作栈指针，也要通过中
间寄存器来操作。另外，ARM64在操作栈指针时必须保证16字节对齐。由于这些体系结构的特点以及前述
提到的[[import][重要意识]]，给ARM汇编实现带来不小的麻烦。

下面仅列出ARM64的Call方式实现的代码，读者可以与前述X86实现作对比。

调用：
#+INCLUDE: "../COROUTINEFINISHED/coroutine/pub_coroutine.h" src c:lines "213-216"

切换：
#+INCLUDE: "../COROUTINEFINISHED/coroutine/coroutine.S" src asm:lines "444-563"



* 总结
协程切换在概念上不算一个复杂的事。技术上的很多概念都来源于生活，并不稀奇。犹如交换两瓶醋和
酱油，我们不能直接倒入另一瓶，否则会污染另一瓶的东西。在瓶子不够用的情况下，如何保证腾出一
个瓶子且不污染瓶子里的东西。不论怎么交换移动，一直都要谨慎：醋和酱油不能混起来也不能洒出来。
这些都是再平常不过的生活经验。

技术（理论）是灰色的，而生活之树常青。

* 后记
在这篇后记里，我想介绍一种已知机器指令的情况下如何获得栈大小的方法，这种方法主要是针对
ARM64平台。

函数在调用时如果需要开栈，那么一定会在函数代码段的开头几个指令进行开栈操作，我们已知的是像
这样编译出来的机器指令：0xff, 0x6f, 0x5f, 0xd1, 0xff, 0x03, 0x2f, 0xd1。这些指令蕴含了栈的
大小，现在要做的是如何提取出栈的大小，栈大小在指令中是以立即数的形式出现，比如 =sub sp sp
　#16=
中的16就是立即数也是栈的大小。

ARM64函数要开栈时，使用sub指令对栈指针进行减法操作，为了提取出栈大小我们需要知道sub指令的
两个操作数为sp寄存器时的详细编码结构。ARM指令都是4字节长，不论32位还是64位，这也是RISC指令
集的一个特点。固定长度的指令导致立即数的编码只能得到有限的空间，ARM64给予立即数12个比特位
的空间。这样只能编码0-4095的立即数，但是ARM可开的栈空间可以远大于4095字节，这是因为ARM额外
提供了两个比特位（具体到开栈，低位有效），当它有效时对12个比特位所代表的数字扩大2**12倍。
下图是改编自[[https://developer.arm.com/docs/ddi0487/latest/arm-architecture-reference-manual-armv8-for-armv8-a-architecture-profile][ARM64官方手册]]C4-234页的一张图，此图完全决定了我们的程序应该如何编写：

#+BEGIN_EXAMPLE
｜　　　　byte 3 　　　　　｜         byte 2           |       byte 1         |    byte 0      |
31 30 29 28 27 26 25 24 |23   22| 21 20 19 18 17 16 15 14 13 12 11 10| 9 8 7 6 5| 4 3 2 1 0|
sf op S  1  0  0  0  1  | shift |              imm12                 |    Rn    |   Rd     |
#+END_EXAMPLE

对于开栈指令，0-9比特位都为1。sf，op也为1，而S为0。这些比特位的具体意义也可以参照ARM64官方
手册，之于我们的目的——计算栈大小，只需知道0-9比特位都为1，sf，op也为1，S为0确定了这是一条
开栈指令，然后要判断该指令中的立即数是否需要移位，即扩大2**12倍。这是由23与22位比特决定。
然后就是取出10-21比特的立即数进行运算取得栈大小。

实现代码如下图：
#+INCLUDE: "../STACKCALFINISHED/testaarch64/stack_size.c" src c:lines "3-39"
byteCode是传进来的机器指令，而codeSize暂时未用到。ARM64开栈最多两条操作栈指针的sub指令，所
以：
#+INCLUDE: "../STACKCALFINISHED/testaarch64/stack_size.c" src c:lines "7-8"
#+INCLUDE: "../STACKCALFINISHED/testaarch64/stack_size.c" src c:lines "21-22"
判断了函数代码段开头两句是否是开栈指令。我们仅分析第一条指令提取栈大小的实现逻辑，第二条类
似。

注意ARM64默认是小端架构，所以低字节在低地址端，高字节在高地址端。为了确定第22，23比特是否
置位，我们用byte2与0xc0作与运算，0xc0来源是二进制11000000。
#+INCLUDE: "../STACKCALFINISHED/testaarch64/stack_size.c" src c:lines "9-10"

接着取出了立即数的高六个比特位，将byte2与0x3f作与运算，0x3f的来源是二进制00111111。注意最
后这六个比特需要左移6位，因为前述的0x3f与运算丢弃了六位。
#+INCLUDE: "../STACKCALFINISHED/testaarch64/stack_size.c" src c:lines "10-11"

然后类似的取出低六比特位，注意最后要右移两位。
#+INCLUDE: "../STACKCALFINISHED/testaarch64/stack_size.c" src c:lines "11-12"

最后根据是否需要扩大2**12倍来计算最终栈大小。
#+INCLUDE: "../STACKCALFINISHED/testaarch64/stack_size.c" src c:lines "14-19"





